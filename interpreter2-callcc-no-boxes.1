#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 5150 0 18 3 156
(
 #"; If you are using racket instead of scheme, uncomment these two lin"
 #"es, comment the (load \"simpleParser.scm\") and uncomment the (requi"
 #"re \"simpleParser.scm\")"
) 0 0 26 29 1 #"\n"
0 0 18 3 13 #";#lang racket"
0 0 26 29 1 #"\n"
0 0 18 3 29 #";(require \"simpleParser.scm\")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 4 #"load"
0 0 26 3 1 #" "
0 0 20 3 20 #"\"functionParser.scm\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 112
(
 #"; An interpreter for the simple language that uses call/cc for the c"
 #"ontinuations.  Does not handle side effects."
) 0 0 26 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 1 #" "
0 0 18 3 7 #"call/cc"
0 0 18 3 1 #" "
0 0 18 3 31 #"call-with-current-continuation)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 77
(
 #"; The functions that start interpret-...  all return the current env"
 #"ironment."
) 0 0 26 29 1 #"\n"
0 0 18 3 55 #"; The functions that start eval-...  all return a value"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 141
(
 #"; The main function.  Calls parser to get the parse tree and interpr"
 #"ets it with a new environment.  The returned value is in the environ"
 #"ment."
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"file"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"scheme->language"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 7 #"call/cc"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"return"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 14 3 7 #"funcall"
0 0 26 3 1 #" "
0 0 14 3 4 #"main"
0 0 26 3 6 #" ()) ("
0 0 14 3 24 #"interpret-statement-list"
0 0 26 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 26 3 1 #" "
0 0 14 3 4 #"file"
0 0 26 3 3 #") ("
0 0 14 3 14 #"newenvironment"
0 0 26 3 2 #") "
0 0 14 3 6 #"return"
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 28 #"\"Break used outside of loop\""
0 0 26 3 4 #")) ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 31 #"\"Continue used outside of loop\""
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 27 #"\"Uncaught exception thrown\""
0 0 26 3 4 #"))) "
0 0 14 3 6 #"return"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 28 #"\"Break used outside of loop\""
0 0 26 3 4 #")) ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 31 #"\"Continue used outside of loop\""
0 0 26 3 4 #")) ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 27 #"\"Uncaught exception thrown\""
0 0 26 3 8 #"))))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 98
(
 #"; interprets a list of statements.  The environment from each statem"
 #"ent is used for the next ones."
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 24 #"interpret-statement-list"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-list"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 11 #"environment"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 24 #"interpret-statement-list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 26 3 3 #") ("
0 0 14 3 19 #"interpret-statement"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 14 #"statement-list"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #") "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 96
(
 #"; interpret a statement in the environment with continuations for re"
 #"turn, break, continue, throw"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 19 #"interpret-statement"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 8 #"function"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 20 #"interpret-fundeclare"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 17 #"interpret-funcall"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"return"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 16 #"interpret-return"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 17 #"interpret-declare"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"="
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 16 #"interpret-assign"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 12 #"interpret-if"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 15 #"interpret-while"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 8 #"continue"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"break"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"throw"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 15 #"interpret-throw"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"try"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 13 #"interpret-try"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 20 #"\"Unknown statement:\""
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 63
#"; Calls the return continuation with the given expression value"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"interpret-return"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"return"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"get-expr"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";--------------------------"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";Deals with Functions"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";--------------------------"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 34 #";Interprets a function declaration"
0 0 26 29 1 #"\n"
0 0 18 3 65
#";Fundeclares are parsed as: (function factorial (x) ((var x 10)))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 20 #"interpret-fundeclare"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 10 #"fundeclare"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"insert"
0 0 26 3 2 #" ("
0 0 14 3 10 #"getFunName"
0 0 26 3 1 #" "
0 0 14 3 10 #"fundeclare"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 12 #"getFunParams"
0 0 26 3 1 #" "
0 0 14 3 10 #"fundeclare"
0 0 26 3 3 #") ("
0 0 14 3 10 #"getFunBody"
0 0 26 3 1 #" "
0 0 14 3 10 #"fundeclare"
0 0 26 3 3 #") ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 17 #"getFunEnvironment"
0 0 26 3 2 #" ("
0 0 14 3 10 #"getFunName"
0 0 26 3 1 #" "
0 0 14 3 10 #"fundeclare"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 5 #"))) ("
0 0 14 3 10 #"push-frame"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"getFunEnvironment"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"funName"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 20 3 16 #"\"Name not found\""
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 15 #"exists-in-list?"
0 0 26 3 1 #" "
0 0 14 3 7 #"funName"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))) "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 17 #"getFunEnvironment"
0 0 26 3 1 #" "
0 0 14 3 7 #"funName"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 47 #";Returns the state generated by a function call"
0 0 26 29 1 #"\n"
0 0 18 3 42 #";Funcalls are parsed as: (funcall gcd x y)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"interpret-funcall"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"funcall"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 16 #"evaluate-funcall"
0 0 26 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 39 #";evaluates the value of a function call"
0 0 26 29 1 #"\n"
0 0 18 3 129
(
 #";NOT SURE IF YOU CAN BREAK AND CONTINUE AND THROW BUT I'M PASSING IT"
 #" IN. IF YOU CAN'T, JUST LET* AN ERROR FOR THOSE CONTINUATIONS"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"evaluate-funcall"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"funcall"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"let*"
0 0 26 3 3 #" (("
0 0 14 3 7 #"closure"
0 0 26 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 26 3 2 #" ("
0 0 14 3 10 #"getFunName"
0 0 26 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 8 #"firstenv"
0 0 26 3 3 #" (("
0 0 14 3 22 #"getClosureEnvProcedure"
0 0 26 3 1 #" "
0 0 14 3 7 #"closure"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 8 #"finalenv"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 10 #"paramLayer"
0 0 26 3 2 #" ("
0 0 14 3 16 #"getClosureParams"
0 0 26 3 1 #" "
0 0 14 3 7 #"closure"
0 0 26 3 3 #") ("
0 0 14 3 20 #"evaluate-all-in-list"
0 0 26 3 2 #" ("
0 0 14 3 19 #"getFuncallParamList"
0 0 26 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")) "
0 0 14 3 8 #"firstenv"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 7 #"call/cc"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"return"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 24 #"interpret-statement-list"
0 0 26 3 2 #" ("
0 0 14 3 14 #"getClosureBody"
0 0 26 3 1 #" "
0 0 14 3 7 #"closure"
0 0 26 3 2 #") "
0 0 14 3 8 #"finalenv"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"           "
0 0 26 29 1 #"\n"
0 0 18 3 42 #";Helper method to create a parameter layer"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"paramLayer"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"varlist"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 82
(
 #";((not (equal? (length varlist) (length vallist))) (error \"Incorrec"
 #"t Parameters\"))"
) 0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 26 3 2 #" ("
0 0 14 3 6 #"boxall"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 46 #";Helper method that boxes everything in a list"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"boxall"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"box"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 4 #")) ("
0 0 14 3 6 #"boxall"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 58
#";Helper method that evaluates every expression in the list"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 20 #"evaluate-all-in-list"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #") ("
0 0 14 3 20 #"evaluate-all-in-list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";some abstractions for closures"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 22 #"getClosureEnvProcedure"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 7 #"closure"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"getClosureParams"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"closure"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"getClosureBody"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 7 #"closure"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 37 #";some abstractions for function calls"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";(funcall gcd x y)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 19 #"getFuncallParamList"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"funcall"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #") "
0 0 14 3 7 #"funcall"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 19 #"getFuncallParamList"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"funcall"
0 0 26 3 3 #") ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 44 #";some abstractions for function declarations"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"getFunName"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 10 #"fundeclare"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 10 #"fundeclare"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"getFunParams"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 10 #"fundeclare"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 10 #"fundeclare"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"getFunBody"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 10 #"fundeclare"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 14 3 10 #"fundeclare"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";------------------"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";Deals with Classes"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";------------------"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";Evaluate all class definitions in a statement list recursively"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"interpret-Classes"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 1 #"("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 10 #"statemenet"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 14 3 5 #"state"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 16 #"interpretClasses"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                         ("
0 0 14 3 15 #"interpret-class"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                         "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"interpret-class"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 10 #"classState"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"hasSuper"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"insert"
0 0 26 3 2 #" ("
0 0 14 3 9 #"className"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 12 #"interpret-do"
0 0 26 3 2 #" ("
0 0 14 3 9 #"classBody"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"initial-env"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"insert"
0 0 26 3 2 #" ("
0 0 14 3 9 #"className"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 12 #"interpret-do"
0 0 26 3 2 #" ("
0 0 14 3 9 #"classBody"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"initial-env"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 9 #")))))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"hasSuper"
0 0 26 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"className"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"classBody"
0 0 26 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"getSuper"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 1 #"("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"innerParens"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 49 #";return the closure for the object of given class"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 18 #"get-object-closure"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 10 #"class-name"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 19 #"no-parent-nonstatic"
0 0 26 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 26 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")) "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 16 #"parent-nonstatic"
0 0 26 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 26 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")) "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 16 #"no-parent-static"
0 0 26 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 26 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")) "
0 0 23 3 1 #"2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 1 #"3"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 19 #"no-parent-nonstatic"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 1 #"("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"parent-nonstatic"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 1 #"("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"no-parent-static"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 1 #"("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"class-environment"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 23 #"get-parent-of-nonstatic"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 20 #"get-parent-of-static"
0 0 26 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #";recursively evaluates statements and modifies the state appropriate"
 #"ly"
) 0 0 26 29 1 #"\n"
0 0 18 3 25 #";based on their contents."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"interpret-do"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 14 3 3 #"env"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 12 #"interpret-do"
0 0 26 3 2 #" ("
0 0 14 3 17 #"restOfExpressions"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 6 #"Mstate"
0 0 26 3 2 #" ("
0 0 14 3 15 #"firstExpression"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                    "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 20 #";Returns a new class"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"createClass"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 26 3 1 #" "
0 0 14 3 4 #"name"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 23 3 1 #"'"
0 0 16 3 5 #"class"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 1 #" "
0 0 14 3 4 #"name"
0 0 26 3 2 #" ("
0 0 14 3 17 #"returnRightFields"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 3 #") ("
0 0 14 3 18 #"returnRightMethods"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 3 #") ("
0 0 14 3 24 #"returnRightInstanceNames"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 50 #";Ways to access different parts of a class closure"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"getClassParent"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 16 3 5 #"class"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 16 3 5 #"class"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"getClassName"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 16 3 5 #"class"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 16 3 5 #"class"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"getClassFields"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 16 3 5 #"class"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #" "
0 0 16 3 5 #"class"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"getClassMethods"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 16 3 5 #"class"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 26 3 1 #" "
0 0 16 3 5 #"class"
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 21 #"getClassInstanceNames"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 16 3 5 #"class"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 26 3 1 #" "
0 0 16 3 5 #"class"
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"returnRightFields"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"null"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 14 #"newenvironment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 14 #"getClassFields"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 18 #"returnRightMethods"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"null"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 14 #"newenvironment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 15 #"getClassMethods"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 24 #"returnRightInstanceNames"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"parent"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"null"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 18 3 51 #";This might need to be new environment I'm not sure"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 9 #"neweframe"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 14 #"getClassFields"
0 0 26 3 1 #" "
0 0 14 3 6 #"parent"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 26 29 1 #"\n"
0 0 18 3 21 #";--------------------"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";DEALS WITH INSTANCES"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";--------------------"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"createInstance"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 16 3 5 #"class"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"inst"
0 0 26 3 1 #" "
0 0 14 3 3 #"cls"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 5 #"())))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"getInstanceClass"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"inst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 4 #"inst"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"getInstanceFields"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"inst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 4 #"inst"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";Change values of instances"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"setInstanceFields"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"inst"
0 0 26 3 1 #" "
0 0 14 3 6 #"fields"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"inst"
0 0 26 3 2 #" ("
0 0 14 3 16 #"getInstanceClass"
0 0 26 3 1 #" "
0 0 14 3 4 #"inst"
0 0 26 3 2 #") "
0 0 14 3 6 #"fields"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 18 3 95
(
 #"; Adds a new variable binding to the environment.  There may be an a"
 #"ssignment with the variable"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"interpret-declare"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 6 #"insert"
0 0 26 3 2 #" ("
0 0 14 3 5 #"varOf"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 4 #";(if"
0 0 18 3 2 #" ("
0 0 18 3 21 #"exists-declare-value?"
0 0 18 3 1 #" "
0 0 18 3 10 #"statement)"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"     "
0 0 18 3 5 #";   ("
0 0 18 3 6 #"insert"
0 0 18 3 2 #" ("
0 0 18 3 15 #"get-declare-var"
0 0 18 3 1 #" "
0 0 18 3 9 #"statement"
0 0 18 3 3 #") ("
0 0 18 3 15 #"eval-expression"
0 0 18 3 2 #" ("
0 0 18 3 17 #"get-declare-value"
0 0 18 3 1 #" "
0 0 18 3 9 #"statement"
0 0 18 3 2 #") "
0 0 18 3 11 #"environment"
0 0 18 3 1 #" "
0 0 18 3 6 #"return"
0 0 18 3 1 #" "
0 0 18 3 5 #"break"
0 0 18 3 1 #" "
0 0 18 3 8 #"continue"
0 0 18 3 1 #" "
0 0 18 3 5 #"throw"
0 0 18 3 2 #") "
0 0 18 3 12 #"environment)"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 4 #";  ("
0 0 18 3 6 #"insert"
0 0 18 3 2 #" ("
0 0 18 3 15 #"get-declare-var"
0 0 18 3 1 #" "
0 0 18 3 9 #"statement"
0 0 18 3 2 #") "
0 0 18 3 1 #"'"
0 0 18 3 7 #"novalue"
0 0 18 3 1 #" "
0 0 18 3 15 #"environment))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"Constructor?"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 6 #"caaddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 3 #"new"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"type"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 6 #"cdaddr"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"handle-value"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 62
#"; Updates the environment to add an new binding for a variable"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"interpret-assign"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 26 3 2 #" ("
0 0 14 3 14 #"get-assign-lhs"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 4 #")) ("
0 0 14 3 20 #"interpret-assign-dot"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 6 #"update"
0 0 26 3 2 #" ("
0 0 14 3 14 #"get-assign-lhs"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #") "
0 0 14 3 10 #"enviroment"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 25 #";(update (get-assign-lhs "
0 0 18 3 9 #"statement"
0 0 18 3 3 #") ("
0 0 18 3 15 #"eval-expression"
0 0 18 3 2 #" ("
0 0 18 3 14 #"get-assign-rhs"
0 0 18 3 1 #" "
0 0 18 3 9 #"statement"
0 0 18 3 2 #") "
0 0 18 3 11 #"environment"
0 0 18 3 1 #" "
0 0 18 3 6 #"return"
0 0 18 3 1 #" "
0 0 18 3 5 #"break"
0 0 18 3 1 #" "
0 0 18 3 8 #"continue"
0 0 18 3 1 #" "
0 0 18 3 5 #"throw"
0 0 18 3 2 #") "
0 0 18 3 14 #"environment)))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 20 #"interpret-assign-dot"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 1 #"("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 18 #"assignment-dot-env"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 4 #"this"
0 0 26 3 3 #") ("
0 0 14 3 15 #"update-existing"
0 0 26 3 2 #" ("
0 0 14 3 18 #"assignment-dot-var"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 20 #"assignment-dot-value"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #") ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 4 #"))  "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 18 #"assignment-dot-env"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"super"
0 0 26 3 3 #") ("
0 0 14 3 15 #"update-existing"
0 0 26 3 2 #" ("
0 0 14 3 18 #"assignment-dot-var"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 20 #"assignment-dot-value"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 1 #"r"
0 0 26 3 1 #" "
0 0 14 3 1 #"b"
0 0 26 3 1 #" "
0 0 14 3 1 #"c"
0 0 26 3 1 #" "
0 0 14 3 1 #"t"
0 0 26 3 3 #") ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 15 #"update-existing"
0 0 26 3 2 #" ("
0 0 14 3 18 #"assignment-dot-var"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 20 #"assignment-dot-value"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 26 3 2 #" ("
0 0 14 3 18 #"assignment-dot-env"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 8 #"))))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 18 #"assignment-dot-env"
0 0 26 3 1 #" "
0 0 14 3 6 #"cadadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 18 #"assignment-dot-var"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 5 #"caddr"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 20 #"assignment-dot-value"
0 0 26 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 112
(
 #"; We need to check if there is an else condition.  Otherwise, we eva"
 #"luate the expression and do the right thing."
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"interpret-if"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 13 #"get-condition"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #") ("
0 0 14 3 19 #"interpret-statement"
0 0 26 3 2 #" ("
0 0 14 3 8 #"get-then"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 12 #"exists-else?"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #") ("
0 0 14 3 19 #"interpret-statement"
0 0 26 3 2 #" ("
0 0 14 3 8 #"get-else"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 89
(
 #"; Interprets a while loop.  We must create break and continue contin"
 #"uations for this loop"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"interpret-while"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"break"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 16 3 6 #"letrec"
0 0 26 3 3 #" (("
0 0 14 3 4 #"loop"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"condition"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 1 #" "
0 0 14 3 9 #"condition"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 14 3 4 #"loop"
0 0 26 3 1 #" "
0 0 14 3 9 #"condition"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 2 #" ("
0 0 14 3 19 #"interpret-statement"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 5 #"break"
0 0 26 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 26 3 1 #" "
0 0 14 3 9 #"condition"
0 0 26 3 1 #" "
0 0 14 3 4 #"body"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 4 #"))) "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                         "
0 0 14 3 11 #"environment"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 4 #"loop"
0 0 26 3 2 #" ("
0 0 14 3 13 #"get-condition"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #") ("
0 0 14 3 8 #"get-body"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 107
(
 #"; Interprets a block.  The break, continue, and throw continuations "
 #"must be adjusted to pop the environment"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"interpret-block"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 2 #" ("
0 0 14 3 24 #"interpret-statement-list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 42 #"                                         ("
0 0 14 3 10 #"push-frame"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 41 #"                                         "
0 0 14 3 6 #"return"
0 0 26 29 1 #"\n"
0 0 26 3 42 #"                                         ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 5 #"break"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 42 #"                                         ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 42 #"                                         ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 167
(
 #"; We use a continuation to throw the proper value. Because we are no"
 #"t using boxes, the environment/state must be thrown as well so any e"
 #"nvironment changes will be kept"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"interpret-throw"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"throw"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"get-expr"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 37 #"; Interpret a try-catch-finally block"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 145
(
 #"; Create a continuation for the throw.  If there is no catch, it has"
 #" to interpret the finally block, and once that completes throw the e"
 #"xception."
) 0 0 26 29 1 #"\n"
0 0 18 3 145
(
 #";   Otherwise, it interprets the catch block with the exception boun"
 #"d to the thrown value and interprets the finally block when the catc"
 #"h is done"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 31 #"create-throw-catch-continuation"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 15 #"catch-statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #" "
0 0 14 3 4 #"jump"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 26 3 3 #") ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"ex"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 26 3 1 #" "
0 0 14 3 2 #"ex"
0 0 26 3 2 #" ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"catch"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 26 3 5 #"))) ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 27 #"\"Incorrect catch statement\""
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"ex"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 4 #"jump"
0 0 26 3 2 #" ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 29 1 #"\n"
0 0 26 3 38 #"                                     ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 2 #" ("
0 0 14 3 24 #"interpret-statement-list"
0 0 26 29 1 #"\n"
0 0 26 3 50 #"                                                 ("
0 0 14 3 8 #"get-body"
0 0 26 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 50 #"                                                 ("
0 0 14 3 6 #"insert"
0 0 26 3 2 #" ("
0 0 14 3 9 #"catch-var"
0 0 26 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 26 3 2 #") "
0 0 14 3 2 #"ex"
0 0 26 3 2 #" ("
0 0 14 3 10 #"push-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 49 #"                                                 "
0 0 14 3 6 #"return"
0 0 26 29 1 #"\n"
0 0 26 3 50 #"                                                 ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 26 3 3 #") ("
0 0 14 3 5 #"break"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 4 #"env2"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 50 #"                                                 ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"env2"
0 0 26 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 4 #"env2"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 50 #"                                                 ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 4 #"env2"
0 0 26 3 3 #") ("
0 0 14 3 5 #"throw"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 2 #" ("
0 0 14 3 9 #"pop-frame"
0 0 26 3 1 #" "
0 0 14 3 4 #"env2"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 37 #"                                     "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 141
(
 #"; To interpret a try block, we must adjust  the return, break, conti"
 #"nue continuations to interpret the finally block if any of them are "
 #"used."
) 0 0 26 29 1 #"\n"
0 0 18 3 159
(
 #";  We must create a new throw continuation and then interpret the tr"
 #"y block with the new continuations followed by the finally block wit"
 #"h the old continuations"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"interpret-try"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"call/cc"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"jump"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 16 3 4 #"let*"
0 0 26 3 3 #" (("
0 0 14 3 13 #"finally-block"
0 0 26 3 2 #" ("
0 0 14 3 18 #"make-finally-block"
0 0 26 3 2 #" ("
0 0 14 3 11 #"get-finally"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 9 #"try-block"
0 0 26 3 2 #" ("
0 0 14 3 14 #"make-try-block"
0 0 26 3 2 #" ("
0 0 14 3 7 #"get-try"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 10 #"new-return"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #") ("
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 9 #"new-break"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 5 #"break"
0 0 26 3 2 #" ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 12 #"new-continue"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"env"
0 0 26 3 3 #") ("
0 0 14 3 8 #"continue"
0 0 26 3 2 #" ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 3 1 #" "
0 0 14 3 3 #"env"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 9 #"new-throw"
0 0 26 3 2 #" ("
0 0 14 3 31 #"create-throw-catch-continuation"
0 0 26 3 2 #" ("
0 0 14 3 9 #"get-catch"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #" "
0 0 14 3 4 #"jump"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 13 #"finally-block"
0 0 26 29 1 #"\n"
0 0 26 3 27 #"                          ("
0 0 14 3 15 #"interpret-block"
0 0 26 3 1 #" "
0 0 14 3 9 #"try-block"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 10 #"new-return"
0 0 26 3 1 #" "
0 0 14 3 9 #"new-break"
0 0 26 3 1 #" "
0 0 14 3 12 #"new-continue"
0 0 26 3 1 #" "
0 0 14 3 9 #"new-throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                          "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 93
(
 #"; helper methods so that I can reuse the interpret-block method on t"
 #"he try and finally blocks"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"make-try-block"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 13 #"try-statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 3 1 #" "
0 0 14 3 13 #"try-statement"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 18 #"make-finally-block"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 17 #"finally-statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 17 #"finally-statement"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 16 3 5 #"begin"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 17 #"finally-statement"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 7 #"finally"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 37 #"\"Incorrectly formatted finally block\""
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 17 #"finally-statement"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 95
(
 #"; Evaluates all possible boolean and arithmetic expressions, includi"
 #"ng constants and variables."
) 0 0 26 29 1 #"\n"
0 0 18 3 20 #";THIS MIGHT BE WRONG"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"eval-expression"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 4 #"expr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"novalue"
0 0 26 3 2 #") "
0 0 14 3 4 #"expr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 7 #"funcall"
0 0 26 3 4 #")) ("
0 0 14 3 16 #"evaluate-funcall"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 6 #"lookup"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 13 #"eval-operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 149
(
 #"; Evaluate a binary (or unary) operator.  Although this is not deali"
 #"ng with side effects, I have the routine evaluate the left operand f"
 #"irst and then"
) 0 0 26 29 1 #"\n"
0 0 18 3 148
(
 #"; pass the result to eval-binary-op2 to evaluate the right operand. "
 #" This forces the operands to be evaluated in the proper order in cas"
 #"e you choose"
) 0 0 26 29 1 #"\n"
0 0 18 3 40 #"; to add side effects to the interpreter"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"eval-operator"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"!"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 5 #"))) ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-binary-op2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 111
(
 #"; Complete the evaluation of the binary operator by evaluating the s"
 #"econd operand and performing the operation."
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"eval-binary-op2"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"*"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"/"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 8 #"quotient"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"%"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 9 #"remainder"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"=="
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"isequal"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"!="
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 7 #"isequal"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"<"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #">"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 1 #">"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #">="
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"||"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 2 #"or"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 26 3 1 #" "
0 0 14 3 8 #"op1value"
0 0 26 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 1 #" "
0 0 14 3 6 #"return"
0 0 26 3 1 #" "
0 0 14 3 5 #"break"
0 0 26 3 1 #" "
0 0 14 3 8 #"continue"
0 0 26 3 1 #" "
0 0 14 3 5 #"throw"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 19 #"\"Unknown operator:\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 4 #"expr"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 111
(
 #"; Determines if two values are equal.  We need a special test becaus"
 #"e there are both boolean and integer types."
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"isequal"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"val1"
0 0 26 3 1 #" "
0 0 14 3 4 #"val2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 4 #"val1"
0 0 26 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 4 #"val2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 4 #"val1"
0 0 26 3 1 #" "
0 0 14 3 4 #"val2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 4 #"val1"
0 0 26 3 1 #" "
0 0 14 3 4 #"val2"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";-----------------"
0 0 26 29 1 #"\n"
0 0 18 3 18 #"; HELPER FUNCTIONS"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";-----------------"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 79
(
 #"; These helper functions define the operator and operands of a value"
 #" expression"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"operator"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 26 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 26 3 1 #" "
0 0 14 3 5 #"caddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand3"
0 0 26 3 1 #" "
0 0 14 3 6 #"cadddr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"exists-operand2?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"exists-operand3?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 26 3 1 #" "
0 0 14 3 9 #"statement"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 72
(
 #"; these helper functions define the parts of the various statement t"
 #"ypes"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"statement-type"
0 0 26 3 1 #" "
0 0 14 3 8 #"operator"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"get-expr"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"get-declare-var"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"get-declare-value"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 21 #"exists-declare-value?"
0 0 26 3 1 #" "
0 0 14 3 16 #"exists-operand2?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"get-assign-lhs"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"get-assign-rhs"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"get-condition"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"get-then"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"get-else"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand3"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"get-body"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"exists-else?"
0 0 26 3 1 #" "
0 0 14 3 16 #"exists-operand3?"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"get-try"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"get-catch"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"get-finally"
0 0 26 3 1 #" "
0 0 14 3 8 #"operand3"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"catch-var"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 15 #"catch-statement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 8 #"operand1"
0 0 26 3 1 #" "
0 0 14 3 15 #"catch-statement"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 25 #";------------------------"
0 0 26 29 1 #"\n"
0 0 18 3 29 #"; Environment/State Functions"
0 0 26 29 1 #"\n"
0 0 18 3 25 #";------------------------"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 32 #"; create a new empty environment"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"newenvironment"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 3 #" ()"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 8 #"newframe"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 114
(
 #"; create an empty frame: a frame is two lists, the first are the var"
 #"iables and the second is the \"store\" of values"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"newframe"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 3 #" ()"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 23 3 1 #"'"
0 0 26 3 9 #"(() ())))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 45 #"; add a frame onto the top of the environment"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"push-frame"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"newframe"
0 0 26 3 2 #") "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 37 #"; remove a frame from the environment"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"pop-frame"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 19 #"; some abstractions"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"topframe"
0 0 26 3 1 #" "
0 0 14 3 3 #"car"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"remainingframes"
0 0 26 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 43 #"; does a variable exist in the environment?"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"exists?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 15 #"exists-in-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 4 #"))) "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 7 #"exists?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 15 #"remainingframes"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 34 #"; does a variable exist in a list?"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"exists-in-list?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 3 #")) "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 130
(
 #"; Looks up a value in the environment.  If the value is a boolean, i"
 #"t converts our languages boolean type to a Scheme boolean type"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"lookup"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 15 #"lookup-variable"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 103
(
 #"; A helper function that does the lookup.  Returns an error if the v"
 #"ariable does not have a legal value"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"lookup-variable"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"value"
0 0 26 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 7 #"novalue"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 44 #"\"error: variable without an assigned value:\""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 14 3 5 #"value"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 57 #"; Return the value bound to a variable in the environment"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"lookup-in-env"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #") ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 27 #"\"error: undefined variable\""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 15 #"exists-in-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 5 #"))) ("
0 0 14 3 15 #"lookup-in-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 51 #"; Return the value bound to a variable in the frame"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"lookup-in-frame"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 5 #"))) ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 27 #"\"error: undefined variable\""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 16 #"language->scheme"
0 0 26 3 2 #" ("
0 0 14 3 9 #"get-value"
0 0 26 3 2 #" ("
0 0 14 3 7 #"indexof"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 4 #")) ("
0 0 14 3 5 #"store"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 47 #"; Get the location of a name in a list of names"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"indexof"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 3 #")  "
0 0 18 3 19 #"; should not happen"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 3 #")) "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 7 #"indexof"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 51 #"; Get the value stored at a given index in the list"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"get-value"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 3 #") ("
0 0 14 3 5 #"unbox"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 9 #"get-value"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 124
(
 #"; Adds a new variable/value binding pair into the environment.  Give"
 #"s an error if the variable already exists in this frame."
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"insert"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 39 #"\"error: variable is being re-declared:\""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 12 #"add-to-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 118
(
 #"; Changes the binding of a variable to a new value in the environmen"
 #"t.  Gives an error if the variable does not exist."
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"update"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"exists?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 15 #"update-existing"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 7 #"myerror"
0 0 26 3 1 #" "
0 0 20 3 39 #"\"error: variable used but not defined:\""
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 45 #"; Add a new variable/value pair to the frame."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"add-to-frame"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"box"
0 0 26 3 2 #" ("
0 0 14 3 16 #"scheme->language"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 4 #")) ("
0 0 14 3 5 #"store"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69
(
 #"; Changes the binding of a variable in the environment to a new valu"
 #"e"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"update-existing"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 15 #"exists-in-list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 15 #"update-in-frame"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 4 #")) ("
0 0 14 3 15 #"remainingframes"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"topframe"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 3 #") ("
0 0 14 3 15 #"update-existing"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #" ("
0 0 14 3 15 #"remainingframes"
0 0 26 3 1 #" "
0 0 14 3 11 #"environment"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 64
#"; Changes the binding of a variable in the frame to a new value."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"update-in-frame"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #") ("
0 0 14 3 21 #"update-in-frame-store"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"variables"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #") ("
0 0 14 3 5 #"store"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 91
(
 #"; Changes a variable binding by placing the new value in the appropr"
 #"iate place in the store"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 21 #"update-in-frame-store"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 26 3 3 #"))("
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 3 #") ("
0 0 14 3 16 #"scheme->language"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 3 #") ("
0 0 14 3 21 #"update-in-frame-store"
0 0 26 3 1 #" "
0 0 14 3 3 #"var"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"varlist"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"vallist"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 44 #"; Returns the list of variables from a frame"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"variables"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 32 #"; Returns the store from a frame"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"store"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"frame"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 86
(
 #"; Functions to convert the Scheme #t and #f to our languages true an"
 #"d false, and back."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"language->scheme"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"scheme->language"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"false"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 4 #"true"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 76
(
 #"; Because the error function is not defined in R5RS scheme, I create"
 #" my own:"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"error-break"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"v"
0 0 26 3 2 #") "
0 0 14 3 1 #"v"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 30 #"call-with-current-continuation"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"k"
0 0 26 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 11 #"error-break"
0 0 26 3 1 #" "
0 0 14 3 1 #"k"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"myerror"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"str"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"letrec"
0 0 26 3 3 #" (("
0 0 14 3 7 #"makestr"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"str"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                            "
0 0 14 3 3 #"str"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 14 3 7 #"makestr"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 26 3 1 #" "
0 0 14 3 3 #"str"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 26 3 1 #" "
0 0 20 3 3 #"\" \""
0 0 26 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 6 #")))) ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 11 #"error-break"
0 0 26 3 2 #" ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 26 3 1 #" "
0 0 14 3 3 #"str"
0 0 26 3 2 #" ("
0 0 14 3 7 #"makestr"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 1 #" "
0 0 14 3 4 #"vals"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 9 #"interpret"
0 0 26 3 1 #" "
0 0 20 3 10 #"\"code.txt\""
0 0 26 3 1 #")"
0           0
